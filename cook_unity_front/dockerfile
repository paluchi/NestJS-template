# Use the official lightweight Node.js 16 image to build the project.
# https://hub.docker.com/_/node
FROM node:16-alpine as build

# Create and change to the app directory.
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure both package.json AND package-lock.json are copied.
# Copying this separately prevents re-running npm install on every code change.
COPY package*.json ./

# Install dependencies.
RUN npm install

# Copy local code to the container image.
COPY . .

# Use ARG to allow custom environment variables at build time
ARG REACT_APP_SERVER_URL

# Set the environment variable using ENV to make it available at build time
ENV REACT_APP_SERVER_URL $REACT_APP_SERVER_URL

# Build the application.
RUN npm run build

# Use the official nginx image for a production build of React.
# https://hub.docker.com/_/nginx
FROM nginx:alpine

# Copy the react build from the build stage.
COPY --from=build /usr/src/app/build /usr/share/nginx/html
COPY nginx/default.conf /etc/nginx/conf.d/default.conf


# Expose port 80 to the Docker host, so we can access it
# from the outside.
EXPOSE 80

# The default command runs nginx in the foreground, so we don't
# need to specify a CMD instruction.
